from aiogram import types
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ContentType


router11 = Router()

import keyboards as kb


PYMENTS_TOKEN = '410694247:TEST:f798f05e-1c2e-4fa7-9eca-36a66efccb92'

ADMINS = [1332517469 , 6395768505]



import json
from datetime import datetime, timedelta

ACTIVITY_FILE = "users_activity.json"

def load_activity():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ —Ñ–∞–π–ª—É."""
    try:
        with open(ACTIVITY_FILE, "r") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_activity(activity):
    """–ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É —Ñ–∞–π–ª."""
    with open(ACTIVITY_FILE, "w") as f:
        json.dump(activity, f, indent=4)

def update_user_activity(user_id):
    """–û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –±–µ–∑ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É."""
    activity = load_activity()
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —ñ—Å–Ω—É—î –≤–∂–µ –∑–∞–ø–∏—Å –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if user_id in activity:
        # –Ø–∫—â–æ —î, –æ–Ω–æ–≤–ª—é—î–º–æ —Ç—ñ–ª—å–∫–∏ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        activity[user_id] = current_time
    else:
        # –Ø–∫—â–æ –Ω–µ–º–∞—î, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å
        activity[user_id] = current_time

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
    save_activity(activity)

def get_online_users():
    
    activity = load_activity()
    online_users = []

    current_time = datetime.now()
    for user_id, last_active_str in activity.items():
        last_active = datetime.strptime(last_active_str, "%Y-%m-%d %H:%M:%S")
        if current_time - last_active <= timedelta(minutes=600):
            online_users.append(user_id)

    return online_users







@router11.message(Command("admin"))
async def admin_panel(message: types.Message):
    user_id = message.from_user
    user_name = message.from_user.full_name
    print(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name} –∑ ID {user_id} –≤—ñ–¥–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É /admin")
    if message.from_user.id in ADMINS:
        await message.answer(f"{message.from_user.first_name} ADMIN ‚±Ω·¥µ·¥æ ‚ö°Ô∏è –∑–∞–π—à–æ–≤ –≤ –ø–∞–Ω–µ–ª—å, ")
        await message.answer(f"–í–∏ —É–≤—ñ–π—à–ª–∏ –≤ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å, ‚úÖ" , reply_markup=kb.admin_panel)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏. ‚ùå")

   
@router11.message(F.text == 'üåü–ó—Ä–æ–±–∏—Ç–∏ —Ä–æ—Å–∏–ª–∫—Éüåü')
async def admin_panel(message: types.Message):
    if message.from_user.id in ADMINS:
        await message.answer(f"–î–ª—è —Ä–æ—Å–∏–ª–∫–∏, —É–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /sendall")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏. ‚ùå")


@router11.message(F.text == "üåü–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—åüåü")
async def admin_panel(message: types.Message):
    if message.from_user.id in ADMINS:
        await message.answer(f"—Ç—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è –∞–∫—Ç–∏–≤–Ω—ñ—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n"
                                "Command - /online '–≤–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –æ—Å—Ç–∞–Ω—é –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤'\n"
                                "\n"
                                "–≤–∞–º –ø–æ–∫–∞–∂–µ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —è–∫—ñ –±—É–ª–∏ —É –º–µ—Ä–µ–∂—ñ –∑–∞ –æ—Å—Ç–Ω–∞–Ω—ñ 3–≥–æ–¥–∏–Ω–∏\n")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏. ‚ùå")

@router11.message(F.text == '‚ö°Ô∏è–ù–∞–∑–∞–¥‚ö°Ô∏è')
async def admin_panel(message: types.Message):
    if message.from_user.id in ADMINS:
        await message.answer(f"–í–∏–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –º–µ–Ω—é" , reply_markup=kb.admin_panel)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏. ‚ùå")

@router11.message(F.text == "‚è∞–¢–µ—Ö-–ø–µ—Ä–µ—Ä–≤–∞‚è∞")
async def admin_panel(message: types.Message):
    if message.from_user.id in ADMINS:
        await message.answer(f"‚ö°Ô∏è\n"
                            "Command - /maintenance '–ø–æ —Ü—ñ–π –∫–æ–º–∞–Ω–¥—ñ –±–æ—Ç –Ω–∞—á–Ω–µ —Å–≤–æ—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –≤–∞–º –ª–∏—à–∏—Ç—å—Å—è –ø—Ä–æ—Å—Ç–æ –ø–æ—á–∏–∫–∞—Ç–∏ –ø–µ–≤–Ω–∏–π —á–∞—Å'\n"
                            "\n"
                            "–ø—ñ—Å–ª—è —Ü–µ–≥–æ –±–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è —ñ –±—É–¥–µ –ø–∞—Ä—Ü—é–≤–∞—Ç–∏ ‚úÖ")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏. ‚ùå")


@router11.message(F.text == "üë•–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñüë•")
async def admin_panel(message: types.Message):
    if message.from_user.id in ADMINS:
        await message.answer(f"‚ö°Ô∏è\n"
                            "Command - /list_users '–ø–æ–∫–∞–∑—É—î –≤–∞–º –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –±–æ—Ç–∞'\n"
                            "\n"
                            "—É–≤–µ–¥—ñ—Ç—å —ó—ó —ñ –¥—ñ–∑–Ω–∞–π—Ç–µ—Å—å –≤—Å—é –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª—é–¥–µ–π –≤ –±–æ—Ç—ñ")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏. ‚ùå")


from aiogram import types

@router11.message(F.text == "/online")
async def online_users(message: types.Message):
    if message.from_user.id not in ADMINS:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏! ‚ùå")
        return

    online_users = get_online_users()
    online_count = len(online_users)
    
    await message.answer(f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≤ –æ–Ω–ª–∞–π–Ω: {online_count}")



import asyncio
from aiogram import types
import random

@router11.message(F.text == "/maintenance")
async def maintenance_command(message: types.Message):
    
    if message.from_user.id not in ADMINS:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏! ‚ùå")
        return

   
    await message.answer("üîß –ë–æ—Ç –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ–π –ø–µ—Ä–µ—Ä–≤—ñ! –æ—á—ñ–∫—É—î—Ç–µ –±–æ—Ç –ø–µ—Ä–µ–≤—ñ—Ä—è—î—Ç—å—Å—è –Ω–∞ —Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å...")
    await asyncio.sleep(5)
    await message.answer("–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—É –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–±–æ—Ç–∏...")
    await asyncio.sleep(7)
    await message.answer("–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Å—ñ—Ö –∫–æ–º–∞–Ω–¥‚åõÔ∏è")
    await asyncio.sleep(10)
    await message.answer("–∫–æ–º–∞–Ω–¥‚åõÔ∏è –ø–∞—Ä—Ü—é—é—Ç—å —É—Å–ø—ñ—à–Ω–æ‚úÖ")
    await asyncio.sleep(2)
    await message.answer("–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–±–æ—Ç–∏ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö üóÇ")
    await asyncio.sleep(15)
    await message.answer("–±–∞–∑–∞ –¥–∞–Ω–∏—Ö –ø—Ä–∞—Ü—é—î —É—Å–ø—ñ—à–Ω–æ ‚úÖ")
    await asyncio.sleep(4)
    await message.answer("–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–∞–π–ª—ñ–≤ –Ω–∞ –∑–±–æ–π. . .")
    await asyncio.sleep(9)
    await message.answer("–≤—Å—ñ —Ñ–∞–π–ª–∏ –ø—Ä–æ–π—à–ª–∏ –ø—Ä–æ–≤—ñ—Ä–∫—É ‚úÖ")
    await asyncio.sleep(1)
    await message.answer("–¢–µ—Ö–Ω—ñ—á–Ω—É –ø–µ—Ä–µ—Ä–≤—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ë–æ—Ç –ø—Ä–∞—Ü—é—î –°—Ç–∞–±—ñ–ª—å–Ω–æ ‚úÖ")
    await message.answer("–ü–æ–º–∏–ª–æ–∫ –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ –±–æ—Ç –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ —É –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")



import json
from aiogram import types
from aiogram.filters import Command

# –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
USERS_FILE = "users.json"

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —ñ–∑ —Ñ–∞–π–ª—É
def load_user_ids():
    try:
        with open(USERS_FILE, "r") as f:
            return json.load(f)
    except FileNotFoundError:
        return []

@router11.message(Command("list_users"))
async def list_users_command(message: types.Message):
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
    if message.from_user.id not in ADMINS:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏. ‚ùå")
        return

    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–ø–∏—Å–æ–∫ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    user_ids = load_user_ids()

    if not user_ids:
        await message.answer("–§–∞–π–ª –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
        return

    # –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∑ —É—Å—ñ—Ö ID
    user_list = ""
    for index, user_id in enumerate(user_ids, start=1):
        user_list += f"{index}. üë§ID: {user_id}\n"

    # –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ –¥–ª—è Telegram (4000 —Å–∏–º–≤–æ–ª—ñ–≤), —Ä–æ–∑–±–∏–≤–∞—î–º–æ –π–æ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏
    char_limit = 4000
    if len(user_list) > char_limit:
        parts = [user_list[i:i+char_limit] for i in range(0, len(user_list), char_limit)]
        for part in parts:
            await message.answer(part)
    else:
        await message.answer(user_list)




from aiogram import types

@router11.message()
async def user_interaction(message: types.Message):
    user_id = message.from_user.id
    update_user_activity(user_id)        
