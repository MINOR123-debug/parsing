from aiogram import Router, F
from aiogram.types import InlineQuery, InlineQueryResultArticle, InputTextMessageContent, CallbackQuery
from telethon import TelegramClient
from telethon.tl.functions.contacts import SearchRequest
from telethon.tl.types import Channel, Chat
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import Message
import uuid
import asyncio
from parser import initiate_parsing  # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –ø–∞—Ä—Å–∏–Ω–≥—É –∑ parser.py
import json

# –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ Telegram API
API_ID = 20979523
API_HASH = "e8aa8ee24dbe98293f5bd124071d4f56"
PHONE_NUMBER = "+380631776515"

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telethon –∫–ª—ñ—î–Ω—Ç–∞
client = TelegramClient("search_session", API_ID, API_HASH)

# –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ—É—Ç–µ—Ä
inline_router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–æ—à—É–∫–æ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É —ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
last_search_query = None
last_search_results = []


async def setup_telethon():
    """
    –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è Telethon –∫–ª—ñ—î–Ω—Ç–∞.
    """
    if not client.is_connected():
        await client.start(PHONE_NUMBER)
        print("Telethon —É—Å–ø—ñ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ!")


@inline_router.inline_query()
async def inline_query_handler(query: InlineQuery):
    global last_search_query, last_search_results

    search_query = query.query.strip().lower()
    results = []

    if not search_query:
        results.append(
            InlineQueryResultArticle(
                id=str(uuid.uuid4()),
                title="–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—à—É–∫—É",
                input_message_content=InputTextMessageContent(
                    message_text="–ü–æ—á–Ω—ñ—Ç—å –≤–≤–æ–¥–∏—Ç–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—à—É–∫—É."
                ),
                description="–í–≤–µ–¥—ñ—Ç—å —á–∞—Å—Ç–∏–Ω—É –Ω–∞–∑–≤–∏ –∫–∞–Ω–∞–ª—É, –±–æ—Ç–∞ –∞–±–æ —á–∞—Ç—É."
            )
        )
    else:
        try:
            # –ü–æ—à—É–∫ —á–µ—Ä–µ–∑ Telethon
            search_result = await client(SearchRequest(
                q=search_query,
                limit=200
            ))

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É
            last_search_results = []

            # –û–±—Ä–æ–±–∫–∞ –∑–Ω–∞–π–¥–µ–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —á–µ—Ä–µ–∑ Telethon
            for entity in search_result.chats:
                if isinstance(entity, Channel) and entity.username:  # –ü—É–±–ª—ñ—á–Ω—ñ –∫–∞–Ω–∞–ª–∏
                    username = entity.username
                    title = entity.title
                    subscribers = getattr(entity, 'participants_count', '–ù–µ–≤—ñ–¥–æ–º–æ')

                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîç –ü–æ—à—É–∫", switch_inline_query_current_chat='')],
                        [InlineKeyboardButton(text="–ü–∞—Ä—Å–∏—Ç–∏", callback_data=f"parse_{entity.id}")]
                    ])

                    result_text = (
                        f"–ö–∞–Ω–∞–ª ¬´{title}¬ª (https://t.me/{username}) (@{username})\n"
                        f"{subscribers} –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤.\n"
                        f"–ó–Ω–∞–π–¥–µ–Ω–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é @ParsingTOPbot"
                    )

                    last_search_results.append(
                        InlineQueryResultArticle(
                            id=str(uuid.uuid4()),
                            title=title,
                            input_message_content=InputTextMessageContent(
                                message_text=result_text
                            ),
                            description=f"{subscribers} –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤ (–∫–∞–Ω–∞–ª).",
                            reply_markup=keyboard
                        )
                    )

                elif isinstance(entity, Chat):  # –ß–∞—Ç–∏
                    title = entity.title
                    participants = getattr(entity, 'participants_count', '–ù–µ–≤—ñ–¥–æ–º–æ')

                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîç –ü–æ—à—É–∫", switch_inline_query_current_chat='')],
                        [InlineKeyboardButton(text="–ü–∞—Ä—Å–∏—Ç–∏", callback_data=f"parse_{entity.id}")]
                    ])

                    result_text = (
                        f"–ì—Ä—É–ø–∞ –∞–±–æ —á–∞—Ç: {title}\n"
                        f"–£—á–∞—Å–Ω–∏–∫—ñ–≤: {participants}.\n"
                        f"–ó–Ω–∞–π–¥–µ–Ω–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é @ParsingTOPbot"
                    )

                    last_search_results.append(
                        InlineQueryResultArticle(
                            id=str(uuid.uuid4()),
                            title=title,
                            input_message_content=InputTextMessageContent(
                                message_text=result_text
                            ),
                            description=f"{participants} —É—á–∞—Å–Ω–∏–∫—ñ–≤ (–≥—Ä—É–ø–∞/—á–∞—Ç).",
                            reply_markup=keyboard
                        )
                    )

            # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
            await query.answer(last_search_results, cache_time=1, is_personal=True)

        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–æ—à—É–∫—É: {e}")
            last_search_results.append(
                InlineQueryResultArticle(
                    id=str(uuid.uuid4()),
                    title="–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É",
                    input_message_content=InputTextMessageContent(
                        message_text="–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–æ—à—É–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
                    ),
                    description="–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
                )
            )

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    await query.answer(last_search_results, cache_time=1, is_personal=True)



from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import CallbackQuery

ADMINS = [1332517469 , 6395768505]

@inline_router.callback_query(F.data.startswith("parse_"))
async def callback_parse(callback: CallbackQuery):
    """
    –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–∞—Ä—Å–∏—Ç–∏".
    """
    if callback.from_user.id not in ADMINS:
        # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –≤–∏—Ö–æ–¥–∏–º–æ
        await callback.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó. ‚ùå", show_alert=True)
        return

    channel_id = int(callback.data.split("_")[1])  # –û—Ç—Ä–∏–º—É—î–º–æ ID –≤–∏–±—Ä–∞–Ω–æ–≥–æ –∫–∞–Ω–∞–ª—É/–≥—Ä—É–ø–∏
    output_file = f"subscribers.json"

    parsing_message = None  # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–º—ñ–Ω–Ω–æ—ó –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è UnboundLocalError

    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ callback
        if callback.message:
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥—É
            parsing_message = await callback.message.answer("–ü–∞—Ä—Å–∏–º–æ —É—á–∞—Å–Ω–∏–∫—ñ–≤. –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ —á–∞—Å...")
        else:
            print("callback.message –≤—ñ–¥—Å—É—Ç–Ω—î!")

        # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –ø–∞—Ä—Å–∏–Ω–≥—É
        subscriber_count = await initiate_parsing(client, channel_id, output_file)

        if subscriber_count > 0:
            # –ü—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–∞—Ä—Å–∏–Ω–≥—É –æ–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[[
                    InlineKeyboardButton(text="–û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫", callback_data=f"get_list_{channel_id}")
                ]]
            )

            if parsing_message:
                await parsing_message.edit_text(
                    f"–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ó–Ω–∞–π–¥–µ–Ω–æ {subscriber_count} –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤.",
                    reply_markup=keyboard
                )
            else:
                await callback.answer(f"–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ó–Ω–∞–π–¥–µ–Ω–æ {subscriber_count} –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤.", reply_markup=keyboard)

        else:
            # –Ø–∫—â–æ –Ω–µ–º–∞—î –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤ (–º–æ–∂–ª–∏–≤–æ, –≥—Ä—É–ø–∞ –ø—É—Å—Ç–∞)
            if parsing_message:
                await parsing_message.edit_text(
                    "–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –∞–ª–µ —É—á–∞—Å–Ω–∏–∫—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
                )
            else:
                await callback.answer("–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –∞–ª–µ —É—á–∞—Å–Ω–∏–∫—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    except Exception as e:
        # –Ø–∫—â–æ –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –∫–∞–Ω–∞–ª –ø—Ä–∏–≤–∞—Ç–Ω–∏–π –∞–±–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π)
        error_message = "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤. –ú–æ–∂–ª–∏–≤–æ, –∫–∞–Ω–∞–ª –∞–±–æ –≥—Ä—É–ø–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ñ."
        if parsing_message:
            await parsing_message.edit_text(error_message)
        else:
            await callback.answer(error_message)
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–∞—Ä—Å–∏–Ω–≥—É: {e}")










@inline_router.callback_query(F.data.startswith("get_list_"))
async def callback_get_list(callback: CallbackQuery):
    """
    –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫".
    """
    channel_id = int(callback.data.split("_")[2])  # –û—Ç—Ä–∏–º—É—î–º–æ ID –≤–∏–±—Ä–∞–Ω–æ–≥–æ –∫–∞–Ω–∞–ª—É/–≥—Ä—É–ø–∏
    output_file = f"subscribers_{channel_id}.json"

    try:
        # –ß–∏—Ç–∞—î–º–æ —Å–ø–∏—Å–æ–∫ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤ —ñ–∑ JSON-—Ñ–∞–π–ª—É
        with open(output_file, "r", encoding="utf-8") as file:
            subscribers = json.load(file)

        # –†–æ–∑–±–∏–≤–∞—î–º–æ —Å–ø–∏—Å–æ–∫ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
        CHUNK_SIZE = 50  # –õ—ñ–º—ñ—Ç —É—á–∞—Å–Ω–∏–∫—ñ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        for i in range(0, len(subscribers), CHUNK_SIZE):
            chunk = subscribers[i:i + CHUNK_SIZE]
            chunk_message = "\n".join([f"{s['name']} (@{s['username']})" for s in chunk])

            if callback.message:
                await callback.message.answer(chunk_message)

        if callback.message:
            await callback.message.answer("–¶–µ –≤—Å—ñ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∏.")

    except FileNotFoundError:
        if callback.message:
            await callback.message.answer("–ü–æ–º–∏–ª–∫–∞: —Å–ø–∏—Å–æ–∫ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")