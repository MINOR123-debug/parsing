import logging
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
import asyncio

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–æ—É—Ç–µ—Ä–∞
router = Router()

ADMIN_IDS = [1332517469, 6395768505]  # –î–æ–¥–∞–Ω–æ —â–µ –æ–¥–Ω–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /help
@router.message(Command("help"))
async def help_command(message: Message, bot: Bot):
    user_id = message.from_user.id
    username = message.from_user.username or "(–±–µ–∑ —é–∑–µ—Ä–Ω–µ–π–º—É)"
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ç–µ–∫—Å—Ç—É –ø—Ä–æ–±–ª–µ–º–∏ –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏
    user_text = message.text.split(maxsplit=1)[1] if len(message.text.split()) > 1 else None

    if not user_text:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –¥–æ–¥–∞–π—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–æ–±–ª–µ–º–∏ –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /help.")
        return

    # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_message = (
        f"–ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:\n\n"
        f"üë§ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user_id}\n"
        f"üîë –ù—ñ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: @{username}\n"
        f"üí¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {user_text}"
    )

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∞–¥–º—ñ–Ω—É
    for admin_id in ADMIN_IDS:
        await bot.send_message(admin_id, admin_message)

    # –í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    await message.answer("–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—É. –î—è–∫—É—î–º–æ!")

# –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /reply –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ
@router.message(Command("reply"))
async def reply_command(message: Message, bot: Bot):
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return

    # –û—á—ñ–∫—É—î–º–æ —Ñ–æ—Ä–º–∞—Ç: /reply <ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞> <—Ç–µ–∫—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ>
    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        await message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /reply <ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞> <—Ç–µ–∫—Å—Ç>")
        return

    try:
        user_id = int(parts[1])  # ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        reply_text = parts[2]    # –¢–µ–∫—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ

        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        await bot.send_message(user_id, f"–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{reply_text}")
        await message.answer("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.")
    except Exception as e:
        await message.answer(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        logging.error(f"–ü–æ–º–∏–ª–∫–∞: {e}")

